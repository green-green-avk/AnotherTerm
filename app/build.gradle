plugins {
    id 'com.android.application'
    id 'com.likethesalad.stem'
}

ext {
    releaseVersionCode = 146
    actionExtrasInfo = 'name.retrofuturistic_corner.extras.INFO'
}

android {
    namespace 'green_green_avk.anotherterm'

    compileSdk 33
    ndkVersion '23.2.8568313'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId namespace
        minSdk 14
        targetSdk 33
        versionCode releaseVersionCode
        versionName 'MkIV-dev54'
        vectorDrawables.useSupportLibrary = true

        resourceConfigurations += ['en']

        manifestPlaceholders += [namespace         : namespace,
                                 releaseVersionCode: releaseVersionCode]
        resValue 'string', 'namespace', android.namespace
        buildConfigField 'String', 'NAMESPACE', "\"$namespace\""
        buildConfigField 'int', 'RELEASE_VERSION_CODE', "$releaseVersionCode"

        def SHELL_SESSION_TOKEN_VAR = 'SHELL_SESSION_TOKEN'
        buildConfigField 'String', 'SHELL_SESSION_TOKEN_VAR', "\"$SHELL_SESSION_TOKEN_VAR\""

        manifestPlaceholders += [actionExtrasInfo: actionExtrasInfo]
        buildConfigField 'String', 'ACTION_EXTRAS_INFO', "\"$actionExtrasInfo\""

        externalNativeBuild {
            cmake {
                cppFlags "-DSHELL_SESSION_TOKEN_VAR=\\\"$SHELL_SESSION_TOKEN_VAR\\\""
                arguments "-DAPP_ID_BASE=$applicationId"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path file('src/main/jni/CMakeLists.txt')
        }
    }

    applicationVariants.configureEach { variant ->
        variant.resValue 'string', 'versionName', variant.versionName
        variant.resValue 'string', 'applicationId', variant.applicationId
        variant.buildConfigField 'int', 'TARGET_SDK_VERSION',
                "$variant.mergedFlavor.targetSdkVersion.apiLevel"
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }

        // TODO: Find some library-side approach...
        // * Gradle + AGP looks crappy when used in even a bit irregular way...
        // https://stackoverflow.com/questions/44731997/android-gradle-packagingoptions-pickfirst-and-exclude-not-working
        resources {
            excludes += ['org/bouncycastle/pqc/**', 'org/bouncycastle/x509/**']
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro',
                    'proguard-rules-debug.pro'
            externalNativeBuild {
                cmake {
                    arguments "-DAPP_ID_TYPE=$applicationIdSuffix"
                }
            }
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel 'FULL'
            externalNativeBuild {
                cmake {
                    arguments '-DAPP_ID_TYPE='
                }
            }
        }
    }

    flavorDimensions += ['compat', 'versioning']

    productFlavors {
        versioned {
            dimension 'versioning'
            // Standard versioning, see
            // https://github.com/green-green-avk/AnotherTerm/issues/30
        }
        downgradable {
            dimension 'versioning'
            versionCode 90 // Fixed to enable painless downgradability
            // The actual version code is provided by the application meta-data bundle
            // entry named "releaseVersionCode" (see AndroidManifest.xml)
        }
        googleplay {
            // Purely for Google Play publishing
            // (to comply with possible future app-bundle requirement)
            dimension 'compat'
            externalNativeBuild.cmake.arguments '-DAPP_ID_SDK='
        }
        redist {
            // Redistributable all-in-one apk
            // with extended permissions for better local terminal support
            dimension 'compat'
            applicationIdSuffix '.redist'
            externalNativeBuild.cmake.arguments "-DAPP_ID_SDK=$applicationIdSuffix"
        }
        oldgood {
            // Redistributable all-in-one apk with target API 28
            // and extended permissions for better local terminal support
            dimension 'compat'
            applicationIdSuffix '.oldgood'
            targetSdk 28
            externalNativeBuild.cmake.arguments "-DAPP_ID_SDK=$applicationIdSuffix"
        }
    }

    variantFilter { variant ->
        setIgnore(![
                ['googleplay', 'versioned'],
                ['redist', 'versioned'],
                ['redist', 'downgradable'],
                ['oldgood', 'downgradable']
        ].contains(variant.flavors*.name))
    }

    sourceSets {
        googleplay {
            java.srcDirs += ['src/modern-extras/java']
            res.srcDirs += ['src/modern-extras/res']
        }
        redist {
            java.srcDirs += ['src/modern-extras/java', 'src/sideload-extras/java']
            res.srcDirs += ['src/modern-extras/res', 'src/sideload-extras/res']
        }
        oldgood {
            java.srcDirs += ['src/sideload-extras/java']
            res.srcDirs += ['src/sideload-extras/res']
        }
        // https://developer.android.com/studio/build/build-variants#sourceset-build
        // It could be either a single flavor or the full combination.
        redistVersionedDebug {
            java.srcDirs += ['src/redistDebug/java']
            res.srcDirs += ['src/redistDebug/res']
        }
        redistDowngradableDebug {
            java.srcDirs += ['src/redistDebug/java']
            res.srcDirs += ['src/redistDebug/res']
        }
//        oldgoodVersionedDebug {
//            java.srcDirs += ['src/oldgoodDebug/java']
//            res.srcDirs += ['src/oldgoodDebug/res']
//        }
        oldgoodDowngradableDebug {
            java.srcDirs += ['src/oldgoodDebug/java']
            res.srcDirs += ['src/oldgoodDebug/res']
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation('androidx.vectordrawable:vectordrawable:1.1.0') {
        because 'Not ready for API 34 yet.'
    }
    implementation 'me.saket:better-link-movement-method:2.2.0'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.asynclayoutinflater:asynclayoutinflater:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation project(path: ':PngChunkExtractor')
    implementation project(path: ':CompatColorPicker')
    implementation project(path: ':MaterialSeekBarPreference')

    //noinspection GradleDependency
    implementation('commons-io:commons-io:2.11.0') {
        because '''2.12.0:
java.lang.NoClassDefFoundError: java.nio.charset.StandardCharsets'''
    }
    //noinspection GradleDependency
    implementation('org.apache.commons:commons-text:1.9') {
        because '''1.10.0:
`java.util.stream` does not exist in API < 24.
Some desugaring is required... postponed for better times.
See <https://developer.android.com/studio/write/java8-support#library-desugaring>'''
    }
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.httpcomponents:httpcore:4.4.16'

    implementation project(path: ':PtyProcess')
    implementation project(path: ':UsbSerial')
    implementation project(path: ':bluetoothspp')
    implementation project(path: ':jsch')
    implementation project(path: ':TelnetClient')
    implementation project(path: ':wayland')
    implementation project(path: ':wayland-xdg_shell')

    implementation 'com.github.green-green-avk:libusbmanager:1.11'

    implementation 'com.github.green-green-avk:anothertermshellpluginutils:1.18'
    implementation 'com.github.green-green-avk:anothertermshellpluginutils-side-application:1.2'

    implementation project(path: ':RelaxedNetworkSecurity')

    // Per-flavor
    redistImplementation project(path: ':USBCameraWorkaround')
    oldgoodImplementation project(path: ':USBCameraWorkaround')
}
